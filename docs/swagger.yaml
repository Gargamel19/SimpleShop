openapi: 3.0.3
info:
  title: SimpleShop-REST
  description: |-
    REST API for the SimpleShop
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:5005
tags:
  - name: user
    description: Everything to manage the Users
  - name: product
    description: Everything to manage the Products
  - name: supplier
    description: Everything to manage the Supplier
  - name: orders
    description: Everything to manage the Orders
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User dose already exist.

  /user/{id}/promote:
    put:
      tags:
        - user
      summary: promoted user to admin 
      description: ''
      operationId: promotedUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be promoted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '405':
          description: Function not allowed
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Created user object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDummy'
      responses:
        '200':
          description: successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
        '405':
          description: Function not allowed
  # PRODUCTS
  /products:
    get:
      tags:
        - product
      summary: Get All Products
      operationId: getProducts
      responses:
        '200':
          description: successful receved products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    post:
      tags:
        - product
      summary: Create Product
      description: This can only be done by the logged in admin.
      operationId: createProduct
      requestBody:
        description: Created product object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Product dose already exist.
  /products/{id}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: This can only be done by the logged in admin.
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: public_id of Product that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product dose not exist.
        '405':
          description: Function not allowed
    put:
      tags:
        - product
      summary: edit product
      description: This can only be done by the logged in admin.
      operationId: editProduct
      parameters:
        - name: id
          in: path
          description: public_id of Product that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Created product object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDummy'
      responses:
        '200':
          description: successful deleted Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - product
      summary: delete product
      description: This can only be done by the logged in admin.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: public_id of Product that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product dose not exist.
        '405':
          description: Function not allowed
  # SUPPLIER
  /supplier:
    get:
      tags:
        - supplier
      summary: Get All Suppliers
      operationId: getSuppliers
      responses:
        '200':
          description: successful receved Suppliers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
    post:
      tags:
        - supplier
      summary: Create Supplier
      description: This can only be done by the logged in admin.
      operationId: createSupplier
      requestBody:
        description: Created Supplier object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SupplierDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          description: Supplier dose already exist.
  /supplier/{id}:
    get:
      tags:
        - supplier
      summary: Get Supplier by ID
      description: This can only be done by the logged in admin.
      operationId: getSupplier
      parameters:
        - name: id
          in: path
          description: public_id of Supplier that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '404':
          description: Supplier dose not exist.
        '405':
          description: Function not allowed
    put:
      tags:
        - supplier
      summary: edit Supplier
      description: This can only be done by the logged in admin.
      operationId: editSupplier
      parameters:
        - name: id
          in: path
          description: public_id of Supplier that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Created Supplier object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SupplierDummy'
      responses:
        '200':
          description: successful deleted Supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '404':
          description: Supplier dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - supplier
      summary: delete Supplier
      description: This can only be done by the logged in admin.
      operationId: deleteSupplier
      parameters:
        - name: id
          in: path
          description: public_id of Supplier that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '404':
          description: Supplier dose not exist.
        '405':
          description: Function not allowed
  /supplier/{id}/product/add:
    put:
      tags:
        - supplier
      summary: add Product to Supplier
      description: This can only be done by the logged in admin.
      operationId: addProductToSupplier
      parameters:
        - name: id
          in: path
          description: public_id of Supplier that need to be updated
          required: true
          schema:
            type: string
            example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
      requestBody:
        description: Created Supplier object
        content:
          multipart/form-data:
            schema:
              properties:
                product_id:
                  type: string
                  example: "522369cd-2185-442e-a88e-9dwetq9c2386"
      responses:
        '200':
          description: successful deleted Supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierProduct'
        '404':
          description: Supplier dose not exist.
        '405':
          description: Function not allowed
  /supplier/{id}/product/{s_p_id}:
    put:
      tags:
        - supplier
      summary: delete Product to Supplier
      description: This can only be done by the logged in admin.
      operationId: addProductToSupplier
      parameters:
        - name: id
          in: path
          description: public_id of Supplier that need to be updated
          required: true
          schema:
            type: string
            example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        - name: s_p_id
          in: path
          description: public_id of Supplier-Product that need to be deleted
          required: true
          schema:
            type: string
            example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
      requestBody:
        description: Created Supplier object
        content:
          multipart/form-data:
            schema:
              properties:
                product_id:
                  type: string
                  example: "522369cd-2185-442e-a88e-9dwetq9c2386"
      responses:
        '200':
          description: successful deleted Supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupplierProduct'
        '404':
          description: Supplier dose not exist.
        '405':
          description: Function not allowed

  # ORDER
  /orders:
    get:
      tags:
        - orders
      summary: Get All Orders
      operationId: getOrders
      responses:
        '200':
          description: successful receved Orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    post:
      tags:
        - orders
      summary: Create Order
      description: This can only be done by the logged in admin.
      operationId: createOrder
      requestBody:
        description: Created Order object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Order dose already exist.
  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get Order by ID
      description: This can only be done by the logged in admin.
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: public_id of Order that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
    put:
      tags:
        - orders
      summary: edit Order
      description: This can only be done by the logged in admin.
      operationId: editOrder
      parameters:
        - name: id
          in: path
          description: public_id of Order that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Created Order object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDummy'
      responses:
        '200':
          description: successful deleted Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - orders
      summary: delete Order
      description: This can only be done by the logged in admin.
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: public_id of Order that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
  # ORDERPOS
  /orders/{id}/pos:
    get:
      tags:
        - orders
      summary: Get All OrderPOS of Order
      operationId: getOrderPoss
      responses:
        '200':
          description: successful receved Orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPOS'
    post:
      tags:
        - orders
      summary: Create OrderPos
      description: This can only be done by the logged in admin.
      operationId: createOrderPos
      requestBody:
        description: Created OrderPos object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderPOSDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPOS'
        '400':
          description: Order dose already exist.
  /orders/{id}/pos/{pos_id}:
    get:
      tags:
        - orders
      summary: Get OrderPOS by ID
      description: This can only be done by the logged in admin.
      operationId: getOrderPOS
      parameters:
        - name: id
          in: path
          description: public_id of Order
          required: true
          schema:
            type: string
        - name: pos_id
          in: path
          description: public_id of OrderPOS 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPOS'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
    put:
      tags:
        - orders
      summary: edit OrderPOS
      description: This can only be done by the logged in admin.
      operationId: editOrderPOS
      parameters:
        - name: id
          in: path
          description: public_id of Order that need to be updated
          required: true
          schema:
            type: string
        - name: pos_id
          in: path
          description: public_id of OrderPOS 
          required: true
          schema:
            type: string
      requestBody:
        description: Created OrderPOS object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderPOSDummy'
      responses:
        '200':
          description: successful deleted Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPOS'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - orders
      summary: delete Order
      description: This can only be done by the logged in admin.
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: public_id of Order that need to be deleted
          required: true
          schema:
            type: string
        - name: pos_id
          in: path
          description: public_id of OrderPOS 
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted OrderPOS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPOS'
        '404':
          description: Order dose not exist.
        '405':
          description: Function not allowed
  
components:
  schemas:
    # ORDER
    Order:
      type: object
      properties:
        public_id:
          type: string
          example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        supplier:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
    OrderDummy:
      type: object
      properties:
        supplier:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
        order_type:
          type: integer
          description: 0=supply 1=order
          example: 0
    # ORDERPOS
    OrderPOS:
      type: object
      properties:
        public_id:
          type: string
          example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        order_id:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
        product_id:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
        costs:
          type: number
          example: 12.4
        amount:
          type: integer
          example: 12
    OrderPOSDummy:
      type: object
      properties:
        order_id:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
        product_id:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
        amount:
          type: integer
          example: 12
    # SUPPLIER
    Supplier:
      type: object
      properties:
        public_id:
          type: string
          example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        title:
          type: string
          example: Super Supplier
    SupplierDummy:
      type: object
      properties:
        title:
          type: string
          example: Super Product
    SupplierProduct:
      type: object
      properties:
        supplier_id:
          type: string
          example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        product_id:
          type: string
          example: '522369cd-2185-442e-a88e-9dwetq9c2386'
    # PRODUCT
    Product:
      type: object
      properties:
        public_id:
          type: string
          example: '525079cd-2185-4e2e-a88e-9d2b5e9c2b81'
        title:
          type: string
          example: Super Product
        price:
          type: number
          example: 1.3
        stock:
          type: integer
          example: 30
    ProductDummy:
      type: object
      properties:
        title:
          type: string
          example: Super Product
        price:
          type: number
          example: 1.3
        stock:
          type: integer
          example: 30
    # USER
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        userType:
          type: integer
          description: User Type (0=user, 1=admin)
          format: int32
          example: 1
    UserDummy:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    ProductArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'