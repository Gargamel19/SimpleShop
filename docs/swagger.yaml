openapi: 3.0.3
info:
  title: SimpleShop
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
externalDocs:
  description: Find out more about Swagge
  url: http://swagger.io
servers:
  - url: http://localhost:5005
tags:
  - name: user
    description: Everything to manage the Users
  - name: product
    description: Everything to manage the Products
  - name: supplier
    description: Everything to manage the Supplier
  - name: order
    description: Everything to manage the Orders
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDummy'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User dose already exist.

  /user/{id}/promote:
    put:
      tags:
        - user
      summary: promoted user to admin 
      description: ''
      operationId: promotedUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be promoted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '405':
          description: Function not allowed
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Created user object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDummy'
      responses:
        '200':
          description: successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
        '405':
          description: Function not allowed
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: id of user that need to be updated
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User dose not exist.
        '405':
          description: Function not allowed
  
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        userType:
          type: integer
          description: User Type (0=user, 1=admin)
          format: int32
          example: 1
    UserDummy:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    UserLoginDummy:
      type: object
      properties:
        username:
          type: string
          example: fdhgsdfgjsdfg
        password:
          type: string
          example: "12345"
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header